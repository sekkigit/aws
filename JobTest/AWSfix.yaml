---
AWSTemplateFormatVersion : "2010-09-09"
Description : Test application infrastructure
Parameters: 
  Environment: 
    Type: String
    Default: dev
    Description : Name of the environment that this stack creates (e.g. 'dev', 'prod', etc.).
  ProjectName:
    Description: This will be used for for resource names, keyname and tagging
    Type: String
    Default: Test

Mappings: 
  EnvMap: 
    dev:
      WindowsServerAmiId: "ami-00b49e2d0e1fc7fad"
      WebsiteInstanceType: "t3.small"
      WebsiteVolumeSize: 30
      WebsiteDesiredCapacity: 1
      WebsiteMaxSize: 1
      WebsiteMinSize: 1
      RedisCacheNodeType: "cache.t2.micro"
    prod:
      WindowsServerAmiId: "ami-00b49e2d0e1fc7fad"
      WebsiteInstanceType: "t3.small"
      WebsiteVolumeSize: 40
      WebsiteDesiredCapacity: 2
      WebsiteMaxSize: 2
      WebsiteMinSize: 2
      RedisCacheNodeType: "cache.t2.small"

Resources: 
#Network
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - {Key: Name, Value: !Sub 'Vpc'}

  InternetGateway: 
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - {Key: Name, Value: !Sub 'InternetGateway'}

  VpcInternetGatewayAttachment: 
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

# Public and private subnets
  PrivateSubnetAZa: 
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: 10.1.0.0/19
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref Vpc
      Tags:
        - {Key: Name, Value: 'private.1'}

  PublicSubnetAZa: 
    Type: AWS::EC2::Subnet
    DependsOn: VpcInternetGatewayAttachment
    Properties:
      CidrBlock: 10.1.32.0/19
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref Vpc
      Tags:
        - {Key: Name, Value: 'public.1'}

  PrivateSubnetAZb: 
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.64.0/19
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref Vpc
      Tags:
        - {Key: Name, Value: 'private.1'}

  PublicSubnetAZb: 
    Type: AWS::EC2::Subnet
    DependsOn: VpcInternetGatewayAttachment
    Properties: 
      CidrBlock: 10.1.96.0/19
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref Vpc
      Tags:
        - {Key: Name, Value: 'public.2'}

#NetworkAclEntry
  NetworkAcl: 
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: !Ref Vpc
      Tags:
      - {Key: Name, Value: !Sub 'ACL'}

  Acl1: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: '0.0.0.0/0'
      Egress: 'true'
      Protocol: '-1'
      RuleAction: 'allow'
      RuleNumber: '100'
      NetworkAclId: !Ref NetworkAcl
        
  Acl2: 
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: '0.0.0.0/0'
      Protocol: '-1'
      RuleAction: 'allow'
      RuleNumber: '100'
      NetworkAclId: !Ref NetworkAcl
        
#Routes 
  PublicSubnetAZaRouteTable: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable  
      SubnetId:  !Ref PublicSubnetAZa
  
  PublicSubnetAZbRouteTable: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZb
        
  PrivateSubnetAZaRouteTable: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetAZa

  PrivateSubnetAZbRouteTable: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetAZb

  RouteToInternetGateway: 
    Type: AWS::EC2::Route
    DependsOn: VpcInternetGatewayAttachment
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      
  RouteToNATA: 
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTableA
      NatGatewayId: !Ref NATGatewayB
  
  RouteToNATB: 
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTableB
      NatGatewayId: !Ref NATGatewayB

# SubnetNetworkAclAssociation
  SubnetAclPublicA: 
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref PublicSubnetAZa
        
  SubnetAclPublicB: 
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref PublicSubnetAZb
  
  SubnetAclPrivateA: 
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId : !Ref PrivateSubnetAZa

  SubnetAclPrivateB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref PrivateSubnetAZb

# NatGateway
  ElasticIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ElasticIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayA: 
    DependsOn: InternetGateway
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIP1.AllocationId
      SubnetId: !Ref PublicSubnetAZa
   
  NATGatewayB: 
    DependsOn: InternetGateway
    Type: AWS::EC2::NatGateway
    Properties : 
      AllocationId: !GetAtt ElasticIP2.AllocationId
      SubnetId: !Ref PublicSubnetAZb


# Public & Private route table creation and association
  PublicRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc
      Tags:
      - {Key: Name, Value: !Sub 'Public'}
  PrivateRouteTableA: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc
      Tags:
      - {Key: Name, Value: !Sub 'Private'}
  PrivateRouteTableB: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc
      Tags:
      - {Key: Name, Value: !Sub 'Private'}

#####LoadBalancer
##  WebsiteELB
  WebsiteLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "WebsiteELB"
      SecurityGroups: [!Ref WebsiteELBSecurityGroup]
      Subnets:
      - !Ref PublicSubnetAZa
      - !Ref PublicSubnetAZb
      IpAddressType: "ipv4"

  HTTPELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref WebsiteELBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref WebsiteLoadBalancer
      Port: 80
      Protocol: HTTP

  WebsiteELBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: "80"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Name: "Website-ELB"
      Port: 80
      Protocol: "HTTP"
      UnhealthyThresholdCount: 3
      VpcId: !Ref Vpc

#AutoScalingGroup
  WebsiteScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [EnvMap, !Ref Environment, WebsiteDesiredCapacity]
        Timeout: "PT25M"
    Properties:
      AvailabilityZones:
      - !Select [0, !GetAZs ""]
      - !Select [1, !GetAZs ""]
      Cooldown: "150"
      DesiredCapacity: !FindInMap [EnvMap, !Ref Environment, WebsiteDesiredCapacity]
      HealthCheckGracePeriod: 300
      HealthCheckType: "EC2"
      LaunchConfigurationName: !Ref WebsiteLaunchConfiguration
      MaxSize: !FindInMap [EnvMap, !Ref Environment, WebsiteVolumeSize]
      MinSize: !FindInMap [EnvMap, !Ref Environment, WebsiteMinSize]
      Tags:
      - Key: "Name"
        Value: !Sub "Website"
        PropagateAtLaunch: true
      TargetGroupARNs: [!Ref WebsiteELBTargetGroup]
      VPCZoneIdentifier:
      - !Ref PrivateSubnetAZa
      - !Ref PrivateSubnetAZb

#LaunchConfiguration
  WebsiteLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "gp2"
          VolumeSize: !FindInMap [EnvMap, !Ref Environment, WebsiteVolumeSize]
      ImageId: !FindInMap [EnvMap, !Ref Environment, WindowsServerAmiId]
      InstanceType: !FindInMap [EnvMap, !Ref Environment, WebsiteInstanceType]
      IamInstanceProfile: !Ref WebIamProfile
      SecurityGroups: [!Ref WebsiteSecurityGroup]
      UserData:
        Fn::Base64: !Sub |
          <powershell>
            ######## SIGNAL TO CLOUD FORMATION
            cfn-signal -e 0 --stack=${AWS::StackName} --resource=WebsiteScalingGroup --region=${AWS::Region}
          </powershell>

## REDIS  
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: !Sub '${ProjectName} Redis Subnet Group'
      SubnetIds:
        - !Ref PublicSubnetAZb
        - !Ref PublicSubnetAZa

  RedisCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    DeletionPolicy: Snapshot
    Properties:
      ClusterName: Test
      CacheNodeType: !FindInMap [EnvMap, !Ref Environment, RedisCacheNodeType]
      CacheParameterGroupName: !Ref RedisParameterGroup
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      VpcSecurityGroupIds: [!GetAtt RedisSecurityGroup.GroupId]
      Engine: redis
      EngineVersion: '5.0.4'
      NumCacheNodes: '1'

  RedisParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      CacheParameterGroupFamily: redis5.0
      Description: !Sub '${ProjectName} Redis Parameter Group'

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ProjectName} Redis Security Group'
      VpcId: !Ref Vpc
      Tags:
        - {Key: Name, Value: !Sub '${ProjectName} Redis'}
        
  RedisSecurityGroupIngress:
    Type : AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RedisSecurityGroup
      IpProtocol: tcp
      FromPort: 1433
      ToPort: 1433
      SourceSecurityGroupId: !Ref WebsiteELBSecurityGroup

#SecurityGroup
  WebsiteELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: Website.ELBSecurityGroup
      GroupDescription: Website ELB Security Group
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      Tags:
      - Key: Name
        Value: ELBSG

  WebsiteSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref Vpc
      GroupName: "Website.WebsiteSecurityGroup"
      GroupDescription: "Website Security Group"
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref WebsiteELBSecurityGroup
        FromPort: 80
        ToPort: 80
        IpProtocol: "tcp"
      Tags:
      - Key: "Name"
        Value: "Website.SG"

#Policys
  Ec2Policy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${Environment}.Ec2Policy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          -  "ec2:DescribeSecurityGroups"
          -  "ec2:Describe*"
          -  "ec2:Get*"
          Resource: "*"
      Roles:
      - !Ref WebRole

  CloudWatchPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub '${Environment}.CloudWatchPolicy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          -  "cloudwatch:PutMetricData"
          -  "logs:CreateLogGroup"
          -  "logs:CreateLogStream"
          -  "logs:DescribeLogGroups"
          -  "logs:DescribeLogStreams"
          -  "logs:PutLogEvents"
          Resource: "*"
      Roles:
      - !Ref WebRole
      
# Role
  WebRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - Effect: "Allow"
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"

# IAM Profile
  WebIamProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: [!Ref WebRole]    
            